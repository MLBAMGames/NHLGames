//// Generated by JSON Class Generator
//// https://quicktype.io/?l=cs&r=json2csharp
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NHLGames.WPF.Objects;
//
//    var data = RootObject.FromJson(jsonString);
//
namespace NHLGames.WPF.Objects
{
    using System.Collections.Generic;

    using Newtonsoft.Json;

    public partial class RootObject
    {
        [JsonProperty("copyright")]
        public string Copyright { get; set; }

        [JsonProperty("dates")]
        public List<Date> Dates { get; set; }

        [JsonProperty("totalEvents")]
        public long TotalEvents { get; set; }

        [JsonProperty("totalGames")]
        public long TotalGames { get; set; }

        [JsonProperty("totalItems")]
        public long TotalItems { get; set; }

        [JsonProperty("totalMatches")]
        public long TotalMatches { get; set; }

        [JsonProperty("wait")]
        public long Wait { get; set; }
    }

    public partial class Date
    {
        [JsonProperty("events")]
        public List<object> Events { get; set; }

        [JsonProperty("games")]
        public List<Game> Games { get; set; }

        [JsonProperty("matches")]
        public List<object> Matches { get; set; }

        [JsonProperty("date")]
        public string PurpleDate { get; set; }

        [JsonProperty("totalEvents")]
        public long TotalEvents { get; set; }

        [JsonProperty("totalGames")]
        public long TotalGames { get; set; }

        [JsonProperty("totalItems")]
        public long TotalItems { get; set; }

        [JsonProperty("totalMatches")]
        public long TotalMatches { get; set; }
    }

    public partial class Game
    {
        [JsonProperty("content")]
        public Content Content { get; set; }

        [JsonProperty("gameDate")]
        public string GameDate { get; set; }

        [JsonProperty("gamePk")]
        public long GamePk { get; set; }

        [JsonProperty("gameType")]
        public string GameType { get; set; }

        [JsonProperty("linescore")]
        public Linescore Linescore { get; set; }

        [JsonProperty("link")]
        public string Link { get; set; }

        [JsonProperty("season")]
        public string Season { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("teams")]
        public FluffyTeams Teams { get; set; }

        [JsonProperty("venue")]
        public FluffyVenue Venue { get; set; }
    }

    public partial class FluffyVenue
    {
        [JsonProperty("link")]
        public string Link { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class FluffyTeams
    {
        [JsonProperty("away")]
        public StickyAway Away { get; set; }

        [JsonProperty("home")]
        public StickyAway Home { get; set; }
    }

    public partial class StickyAway
    {
        [JsonProperty("leagueRecord")]
        public LeagueRecord LeagueRecord { get; set; }

        [JsonProperty("score")]
        public long Score { get; set; }

        [JsonProperty("team")]
        public Team Team { get; set; }
    }

    public partial class Team
    {
        [JsonProperty("abbreviation")]
        public string Abbreviation { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; }

        [JsonProperty("conference")]
        public Conference Conference { get; set; }

        [JsonProperty("division")]
        public Conference Division { get; set; }

        [JsonProperty("firstYearOfPlay")]
        public string FirstYearOfPlay { get; set; }

        [JsonProperty("franchise")]
        public Franchise Franchise { get; set; }

        [JsonProperty("franchiseId")]
        public long FranchiseId { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("link")]
        public string Link { get; set; }

        [JsonProperty("locationName")]
        public string LocationName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("officialSiteUrl")]
        public string OfficialSiteUrl { get; set; }

        [JsonProperty("shortName")]
        public string ShortName { get; set; }

        [JsonProperty("teamName")]
        public string TeamName { get; set; }

        [JsonProperty("venue")]
        public PurpleVenue Venue { get; set; }
    }

    public partial class PurpleVenue
    {
        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("link")]
        public string Link { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("timeZone")]
        public TimeZone TimeZone { get; set; }
    }

    public partial class TimeZone
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("offset")]
        public double Offset { get; set; }

        [JsonProperty("tz")]
        public string Tz { get; set; }
    }

    public partial class Franchise
    {
        [JsonProperty("franchiseId")]
        public long FranchiseId { get; set; }

        [JsonProperty("link")]
        public string Link { get; set; }

        [JsonProperty("teamName")]
        public string TeamName { get; set; }
    }

    public partial class LeagueRecord
    {
        [JsonProperty("losses")]
        public long Losses { get; set; }

        [JsonProperty("ot")]
        public long Ot { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("wins")]
        public long Wins { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("abstractGameState")]
        public string AbstractGameState { get; set; }

        [JsonProperty("codedGameState")]
        public string CodedGameState { get; set; }

        [JsonProperty("detailedState")]
        public string DetailedState { get; set; }

        [JsonProperty("startTimeTBD")]
        public bool StartTimeTBD { get; set; }

        [JsonProperty("statusCode")]
        public string StatusCode { get; set; }
    }

    public partial class Linescore
    {
        [JsonProperty("currentPeriod")]
        public long CurrentPeriod { get; set; }

        [JsonProperty("currentPeriodOrdinal")]
        public string CurrentPeriodOrdinal { get; set; }

        [JsonProperty("currentPeriodTimeRemaining")]
        public string CurrentPeriodTimeRemaining { get; set; }

        [JsonProperty("hasShootout")]
        public bool HasShootout { get; set; }

        [JsonProperty("intermissionInfo")]
        public IntermissionInfo IntermissionInfo { get; set; }

        [JsonProperty("periods")]
        public List<Period> Periods { get; set; }

        [JsonProperty("powerPlayInfo")]
        public PowerPlayInfo PowerPlayInfo { get; set; }

        [JsonProperty("powerPlayStrength")]
        public string PowerPlayStrength { get; set; }

        [JsonProperty("shootoutInfo")]
        public ShootoutInfo ShootoutInfo { get; set; }

        [JsonProperty("teams")]
        public PurpleTeams Teams { get; set; }
    }

    public partial class PurpleTeams
    {
        [JsonProperty("away")]
        public FluffyAway Away { get; set; }

        [JsonProperty("home")]
        public FluffyAway Home { get; set; }
    }

    public partial class FluffyAway
    {
        [JsonProperty("goaliePulled")]
        public bool GoaliePulled { get; set; }

        [JsonProperty("goals")]
        public long Goals { get; set; }

        [JsonProperty("numSkaters")]
        public long NumSkaters { get; set; }

        [JsonProperty("powerPlay")]
        public bool PowerPlay { get; set; }

        [JsonProperty("shotsOnGoal")]
        public long ShotsOnGoal { get; set; }

        [JsonProperty("team")]
        public Conference Team { get; set; }
    }

    public partial class Conference
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("link")]
        public string Link { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class ShootoutInfo
    {
        [JsonProperty("away")]
        public PurpleAway Away { get; set; }

        [JsonProperty("home")]
        public PurpleAway Home { get; set; }
    }

    public partial class PurpleAway
    {
        [JsonProperty("attempts")]
        public long Attempts { get; set; }

        [JsonProperty("scores")]
        public long Scores { get; set; }
    }

    public partial class PowerPlayInfo
    {
        [JsonProperty("inSituation")]
        public bool InSituation { get; set; }

        [JsonProperty("situationTimeElapsed")]
        public long SituationTimeElapsed { get; set; }

        [JsonProperty("situationTimeRemaining")]
        public long SituationTimeRemaining { get; set; }
    }

    public partial class Period
    {
        [JsonProperty("away")]
        public TentacledAway Away { get; set; }

        [JsonProperty("home")]
        public TentacledAway Home { get; set; }

        [JsonProperty("num")]
        public long Num { get; set; }

        [JsonProperty("ordinalNum")]
        public string OrdinalNum { get; set; }

        [JsonProperty("periodType")]
        public string PeriodType { get; set; }

        [JsonProperty("startTime")]
        public string StartTime { get; set; }
    }

    public partial class TentacledAway
    {
        [JsonProperty("goals")]
        public long Goals { get; set; }

        [JsonProperty("rinkSide")]
        public string RinkSide { get; set; }

        [JsonProperty("shotsOnGoal")]
        public long ShotsOnGoal { get; set; }
    }

    public partial class IntermissionInfo
    {
        [JsonProperty("inIntermission")]
        public bool InIntermission { get; set; }

        [JsonProperty("intermissionTimeElapsed")]
        public long IntermissionTimeElapsed { get; set; }

        [JsonProperty("intermissionTimeRemaining")]
        public long IntermissionTimeRemaining { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("editorial")]
        public Editorial Editorial { get; set; }

        [JsonProperty("highlights")]
        public Editorial Highlights { get; set; }

        [JsonProperty("link")]
        public string Link { get; set; }

        [JsonProperty("media")]
        public Media Media { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("epg")]
        public List<Epg> Epg { get; set; }
    }

    public partial class Epg
    {
        [JsonProperty("items")]
        public List<Item> Items { get; set; }

        [JsonProperty("platform")]
        public string Platform { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("topicList")]
        public string TopicList { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("callLetters")]
        public string CallLetters { get; set; }

        [JsonProperty("eventId")]
        public string EventId { get; set; }

        [JsonProperty("feedName")]
        public string FeedName { get; set; }

        [JsonProperty("freeGame")]
        public bool FreeGame { get; set; }

        [JsonProperty("gamePlus")]
        public bool GamePlus { get; set; }

        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("mediaFeedType")]
        public string MediaFeedType { get; set; }

        [JsonProperty("mediaPlaybackId")]
        public string MediaPlaybackId { get; set; }

        [JsonProperty("mediaState")]
        public string MediaState { get; set; }
    }

    public partial class Editorial
    {
    }

    public partial class RootObject
    {
        public static RootObject FromJson(string json) => JsonConvert.DeserializeObject<RootObject>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RootObject self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    public class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
        };
    }
}

